import torch
import torch.nn as nn
import torch.optim as optim

# Define a simple neural network
class SimpleNet(nn.Module):
    def __init__(self):
        super(SimpleNet, self).__init__()
        self.fc1 = nn.Linear(784, 64)  # Input: 784 features, Hidden: 64
        self.fc2 = nn.Linear(64, 10)  # Output: 10 classes

    def forward(self, x):
        x = torch.relu(self.fc1(x))
        return self.fc2(x)

# Initialize the model, loss function, and optimizer
model = SimpleNet()
criterion = nn.CrossEntropyLoss()
optimizer = optim.Adam(model.parameters(), lr=0.001)

# Example training data
data = torch.randn(1000, 784)  # 1000 samples, 784 features each
labels = torch.randint(0, 10, (1000,))  # Random labels (0-9)

# Training loop
for epoch in range(5):
    optimizer.zero_grad()
    outputs = model(data)
    loss = criterion(outputs, labels)
    loss.backward()
    optimizer.step()
    print(f"Epoch {epoch + 1}, Loss: {loss.item():.4f}")

print("Training complete!")
